
10
3 5
5 0 0 0 0
0 0 0 0 0
0 0 5 0 0
Case #1: 40
1 5
30000 0 1000000 0 3
Case #2: 3969991
3 4
0 100000 99 3
100000 99999 100000 99998
99999 100001 100000 99999
Case #2: 299897

10 10
389420 161028 1333766 1182639 1569380 1746456 96408 1919431 1950323 1341848
1962016 1040968 755599 432576 1697634 550945 763754 1836437 1684613 1997206
790264 1893034 1989379 1442025 877139 1133076 1424572 1778073 1705106 128345
1084996 412084 948166 756273 1829148 1902723 557887 1208792 225903 266082
294868 1733295 1597296 351709 217414 1314275 1962130 1944012 292503 1287401
921502 58330 811744 223490 826145 277939 875054 1328053 1926814 917682
1847424 1072766 632789 301893 399150 1808457 489873 1508723 1507554 1704871
1038110 559931 1628233 520707 320762 1224661 136505 1428089 489928 357677
1094770 1398877 690491 6976 1419083 1505893 1202938 402661 1598333 1900355
1686911 1378402 1261973 197521 291153 778766 97355 535733 1381899 970162
Case #1: 95014255

50 50
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1
100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1 100 1000 10000 256789 1

Case #1: 508024450



//    private static long solve(int r, int c, Scanner in) {
//        int[] count = new int[]{0};
//        int[][] grid = new int[r][c];
//        for (int i = 0; i < r; i++) {
//            for (int j = 0; j < c; j++) {
//                grid[i][j] = in.nextInt();
//            }
//        }
//        int max = findMax(grid, r, c);
//        int t = max > 1000 ? max - 1000 : 0;
//        for (int i = max; i >= t; i--) {
//            processAllMax(grid, r, c, i, count);
//        }
//        return count[0];
//    }
//
//    private static void processAllMax(int[][] grid, int r, int c, int max, int[] count) {
//        for (int i = 0; i < r; i++) {
//            for (int j = 0; j < c; j++) {
//                if (grid[i][j] == max) {
//                    // left
//                    if (j != 0) {
//                        if (grid[i][j - 1] < max) {
//                            count[0] += max - grid[i][j - 1] - 1;
//                            grid[i][j - 1] = max - 1;
//                        }
//                    }
//                    // right
//                    if (j != c - 1) {
//                        if (grid[i][j + 1] < max) {
//                            count[0] += max - grid[i][j + 1] - 1;
//                            grid[i][j + 1] = max - 1;
//                        }
//                    }
//                    // top
//                    if (i != 0) {
//                        if (grid[i - 1][j] < max) {
//                            count[0] += max - grid[i - 1][j] - 1;
//                            grid[i - 1][j] = max - 1;
//                        }
//                    }
//                    // bottom
//                    if (i != r - 1) {
//                        if (grid[i + 1][j] < max) {
//                            count[0] += max - grid[i + 1][j] - 1;
//                            grid[i + 1][j] = max - 1;
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    private static int findMax(int[][] grid, int r, int c) {
//        int max = 0;
//        for (int i = 0; i < r; i++) {
//            for (int j = 0; j < c; j++) {
//                if (grid[i][j] > max) {
//                    max = grid[i][j];
//                }
//            }
//        }
//        return max;
//    }




private static long solve(int r, int c, Scanner in) {
        long count = 0;
        int[][] grid = new int[r][c];
        boolean[][] visited = new boolean[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                grid[i][j] = in.nextInt();
            }
        }
        Queue<Integer> q = new LinkedList<>();
        int max = findMax(grid, r, c);
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == max) {
                    q.add(i * c + j);
                }
            }
        }
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                List<Integer> integers = map.get(grid[i][j]);
                if (integers != null) {
                    integers.add(i * c + j);
                } else {
                    integers = new ArrayList<>();
                    integers.add(i * c + j);
                    map.put(grid[i][j], integers);
                }
            }
        }
        while (!q.isEmpty()) {
            Integer current = q.poll();
            int i = current / c;
            int j = current % c;
            int curVal = grid[i][j];
            // left
            if (j != 0) {
                if (!visited[i][j - 1] && grid[i][j - 1] < curVal) {
                    count += curVal - grid[i][j - 1] - 1;
                    grid[i][j - 1] = curVal - 1;
                    q.add(i * c + j - 1);
                    visited[i][j - 1] = true;
                }
            }
            // right
            if (j != c - 1) {
                if (!visited[i][j + 1] && grid[i][j + 1] < curVal) {
                    count += curVal - grid[i][j + 1] - 1;
                    grid[i][j + 1] = curVal - 1;
                    q.add(i * c + j + 1);
                    visited[i][j + 1] = true;
                }
            }
            // top
            if (i != 0) {
                if (!visited[i - 1][j] && grid[i - 1][j] < curVal) {
                    count += curVal - grid[i - 1][j] - 1;
                    grid[i - 1][j] = curVal - 1;
                    q.add((i - 1) * c + j);
                    visited[i - 1][j] = true;
                }
            }
            // bottom
            if (i != r - 1) {
                if (!visited[i + 1][j] && grid[i + 1][j] < curVal) {
                    count += curVal - grid[i + 1][j] - 1;
                    grid[i + 1][j] = curVal - 1;
                    q.add((i + 1) * c + j);
                    visited[i + 1][j] = true;
                }
            }
            List<Integer> integers = map.get(curVal - 1);
            if (integers != null) {
                for (int k = 0; k < integers.size(); k++) {
                    Integer integer = integers.get(k);
                    if (!visited[integer / c][integer % c]) {
                        q.add(integer);
                    }
                }
            }
//            for (int k = 0; k < r; k++) {
//                for (int l = 0; l < c; l++) {
//                    if (grid[k][l] == curVal - 1 && !visited[k][l]) {
//                        q.add(k * c + l);
//                    }
//                }
//            }
        }
        return count;
    }


    private static int findMax(int[][] grid, int r, int c) {
        int max = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
        }
        return max;
    }



    private static long solve(int r, int c, Scanner in) {
            int[][] grid = new int[r][c];
            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) {
                    grid[i][j] = in.nextInt();
                }
            }
            Map<Integer, Set<Integer>> values = new HashMap<>();
            int max = findMax(grid, r, c, values);
            int[] count = new int[]{0};
            for (int i = max; i >= max - r - c; i--) {
                Set<Integer> integers = values.get(i);
                if (integers == null) {
                    continue;
                }
                integers.stream().forEach(val -> {
                    int iCord = val / c;
                    int jCord = val % c;
                    int curVal = grid[iCord][jCord];
                    values.computeIfAbsent(curVal - 1, k -> new HashSet<>());
                    Set<Integer> newValues = values.get(curVal - 1);
                    // left
                    if (jCord != 0) {
                        if (grid[iCord][jCord - 1] < curVal) {
                            count[0] += curVal - grid[iCord][jCord - 1] - 1;
                            Set<Integer> vals = values.get(grid[iCord][jCord - 1]);
                            vals.remove(iCord * c + jCord - 1);
                            grid[iCord][jCord - 1] = curVal - 1;
                            newValues.add(iCord * c + jCord - 1);
                        }
                    }
                    // right
                    if (jCord != c - 1) {
                        if (grid[iCord][jCord + 1] < curVal) {
                            count[0] += curVal - grid[iCord][jCord + 1] - 1;
                            Set<Integer> vals = values.get(grid[iCord][jCord + 1]);
                            vals.remove(iCord * c + jCord + 1);
                            grid[iCord][jCord + 1] = curVal - 1;
                            newValues.add(iCord * c + jCord + 1);
                        }
                    }
                    // top
                    if (iCord != 0) {
                        if (grid[iCord - 1][jCord] < curVal) {
                            count[0] += curVal - grid[iCord - 1][jCord] - 1;
                            Set<Integer> vals = values.get(grid[iCord - 1][jCord]);
                            vals.remove((iCord - 1) * c + jCord);
                            grid[iCord - 1][jCord] = curVal - 1;
                            newValues.add((iCord - 1) * c + jCord);
                        }
                    }
                    // bottom
                    if (iCord != r - 1) {
                        if (grid[iCord + 1][jCord] < curVal) {
                            count[0] += curVal - grid[iCord + 1][jCord] - 1;
                            Set<Integer> vals = values.get(grid[iCord + 1][jCord]);
                            vals.remove((iCord + 1) * c + jCord);
                            grid[iCord + 1][jCord] = curVal - 1;
                            newValues.add((iCord + 1) * c + jCord);
                        }
                    }
                });
            }
            return count[0];
        }

        private static int findMax(int[][] grid, int r, int c, Map<Integer, Set<Integer>> values) {
            int max = 0;
            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) {
                    int val = grid[i][j];
                    if (val > max) {
                        max = val;
                    }
                    Set<Integer> integers = values.get(val);
                    if (integers == null) {
                        integers = new HashSet<>();
                        integers.add(i * c + j);
                        values.put(val, integers);
                    } else {
                        integers.add(i * c + j);
                    }
                }
            }
            return max;
        }